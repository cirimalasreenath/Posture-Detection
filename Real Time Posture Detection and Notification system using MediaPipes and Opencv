import tensorflow as tf
import tensorflow_hub as hub
import cv2
import numpy as np
import math
import time
import pandas as pd
import os
import tkinter as tk
from threading import Thread
import smtplib
from email.message import EmailMessage

# === Load MoveNet Thunder model ===
movenet = hub.load("https://tfhub.dev/google/movenet/singlepose/thunder/4")
movenet_model = movenet.signatures['serving_default']

# === Keypoints & skeleton structure ===
keypoint_names = ['nose', 'left_eye', 'right_eye', 'left_ear', 'right_ear', 'left_shoulder', 'right_shoulder',
                  'left_elbow', 'right_elbow', 'left_wrist', 'right_wrist', 'left_hip', 'right_hip',
                  'left_knee', 'right_knee', 'left_ankle', 'right_ankle']

keypoint_pairs = [
    (0, 1), (1, 2), (2, 3), (3, 4),
    (5, 6), (5, 7), (7, 9), (6, 8), (8, 10),
    (11, 12), (12, 13), (13, 15), (12, 14), (14, 16)
]

# === Excel File Path ===
file_path = r"C:\Users\sreen\PycharmProjects\1\posture_data.xlsx"
if not os.path.exists(file_path):
    df = pd.DataFrame(columns=["Timestamp", "Posture Angle", "Alert Count"])
    df.to_excel(file_path, index=False)
    print(f"‚úÖ Created new Excel file at {file_path}")
else:
    print(f"üìÇ Excel file already exists at {file_path}")

# === Send Excel via Gmail ===
def send_excel_via_gmail():
    sender_email = "sreenathcirimala@gmail.com"
    receiver_email = "sreenath6787@gmail.com"
    app_password = "zpko mcuk ctiw mayt"
    subject = "Posture Data Excel File"
    body = "Hi, please find the attached posture data Excel file."

    msg = EmailMessage()
    msg['Subject'] = subject
    msg['From'] = sender_email
    msg['To'] = receiver_email
    msg.set_content(body)

    try:
        with open(file_path, 'rb') as f:
            file_data = f.read()
            file_name = os.path.basename(file_path)
            msg.add_attachment(file_data,
                               maintype='application',
                               subtype='vnd.openxmlformats-officedocument.spreadsheetml.sheet',
                               filename=file_name)

        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            print("üì° Connecting to Gmail SMTP...")
            smtp.login(sender_email, app_password)
            smtp.send_message(msg)
            print("‚úÖ Email sent successfully to", receiver_email)

    except FileNotFoundError:
        print("‚ùå Excel file not found.")
    except Exception as e:
        print("‚ùå Failed to send email:", e)

# === Calculate Angle ===
def calculate_angle(a, b, c):
    a, b, c = np.array(a), np.array(b), np.array(c)
    ba = a - b
    bc = c - b
    cosine_angle = np.dot(ba, bc) / (np.linalg.norm(ba) * np.linalg.norm(bc))
    angle = math.degrees(np.arccos(np.clip(cosine_angle, -1.0, 1.0)))
    return angle

# === Detect Pose ===
def detect_pose(frame):
    img = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    img_resized = tf.image.resize_with_pad(tf.convert_to_tensor(img), 256, 256)
    input_img = tf.expand_dims(img_resized, axis=0)
    input_img = tf.cast(input_img, dtype=tf.int32)
    outputs = movenet_model(input_img)
    return outputs['output_0'].numpy()

# === Show Notification ===
def show_popup():
    def popup():
        root = tk.Tk()
        root.title("Posture Alert")
        root.geometry("300x100")
        tk.Label(root, text="‚ö† Maintain good posture!", font=("Arial", 14)).pack(pady=20)
        root.after(3000, root.destroy)
        root.mainloop()
    Thread(target=popup).start()

# === Save to Excel ===
def save_to_excel(angle, count):
    df = pd.read_excel(file_path)
    timestamp = time.strftime("%Y-%m-%d %H:%M:%S")
    new_data = pd.DataFrame([[timestamp, angle, count]], columns=["Timestamp", "Posture Angle", "Alert Count"])
    df = pd.concat([df, new_data], ignore_index=True)
    df.to_excel(file_path, index=False)
    print(f"üìà Data saved: {timestamp}, Angle: {angle}, Alerts: {count}")

# === Visualize Pose ===
def visualize_pose(frame, keypoints):
    global start_time, counter

    keypoints = np.array(keypoints)
    if keypoints.shape == (1, 1, 17, 3):
        keypoints = keypoints[0, 0]

        try:
            shoulder = [keypoints[5, 1] * frame.shape[1], keypoints[5, 0] * frame.shape[0]]
            hip = [keypoints[11, 1] * frame.shape[1], keypoints[11, 0] * frame.shape[0]]
            knee = [keypoints[13, 1] * frame.shape[1], keypoints[13, 0] * frame.shape[0]]
            angle = calculate_angle(shoulder, hip, knee)

            cv2.putText(frame, str(int(angle)), (int(hip[0]), int(hip[1])),
                        cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)

            if angle < 158:
                if start_time is None:
                    start_time = time.time()
                else:
                    elapsed = time.time() - start_time
                    if elapsed >= 5:
                        show_popup()
                        counter += 1
                        save_to_excel(int(angle), counter)
                        start_time = None

        except Exception as e:
            print("‚ùå Error in keypoint processing:", e)

        for idx, kp in enumerate(keypoints):
            x, y = int(kp[1] * frame.shape[1]), int(kp[0] * frame.shape[0])
            cv2.circle(frame, (x, y), 6, (255, 0, 0), -1)
            if keypoint_names[idx]:
                cv2.putText(frame, keypoint_names[idx], (x, y - 10),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.4, (0, 255, 0), 1)

        for pair in keypoint_pairs:
            a, b = keypoints[pair[0]], keypoints[pair[1]]
            x1, y1 = int(a[1] * frame.shape[1]), int(a[0] * frame.shape[0])
            x2, y2 = int(b[1] * frame.shape[1]), int(b[0] * frame.shape[0])
            cv2.line(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)

    return frame

# === Webcam Setup ===
cap = cv2.VideoCapture(0)
if not cap.isOpened():
    print("‚ùå Webcam could not be opened.")
    exit()

start_time = None
counter = 0

# === Main Loop ===
while True:
    ret, frame = cap.read()
    if not ret:
        print("‚ùå Failed to capture frame.")
        break

    keypoints = detect_pose(frame)
    output_frame = visualize_pose(frame, keypoints)
    cv2.imshow('üìπ Posture Detection', output_frame)

    # Exit when 'q' is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        print("üõë Exiting...")
        break

# Send Excel after exiting the loop
send_excel_via_gmail()

cap.release()
cv2.destroyAllWindows()
