!pip install mediapipe opencv-python
import cv2
import mediapipe as mp
import numpy as np
import time
import tkinter as tk
from tkinter import messagebox

# Initialize video capture
cap = cv2.VideoCapture(0)

# Initialize variables
start_time = None
counter = 0

# Function to show popup notification
def show_popup():
    root = tk.Tk()
    root.withdraw()
    messagebox.showwarning("Notification", "Adjust your position")

# Function to calculate angle between three points
def calculate_angle(a, b, c):
    a = np.array(a)  # First point
    b = np.array(b)  # Second point
    c = np.array(c)  # Third point
    
    radians = np.arctan2(c[1] - b[1], c[0] - b[0]) - np.arctan2(a[1] - b[1], a[0] - b[0])
    angle = np.abs(radians * 180.0 / np.pi)
    
    if angle > 180.0:
        angle = 360.0 - angle
        
    return angle

# Initialize Mediapipe
mp_drawing = mp.solutions.drawing_utils
mp_pose = mp.solutions.pose

# Setup Mediapipe instance
with mp_pose.Pose(min_detection_confidence=0.5, min_tracking_confidence=0.5) as pose:
    while cap.isOpened():
        ret, frame = cap.read()
        
        # Recolor image to RGB
        image = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        image.flags.writeable = False
        
        # Make detection
        results = pose.process(image)
        
        # Recolor back to BGR
        image.flags.writeable = True
        image = cv2.cvtColor(image, cv2.COLOR_RGB2BGR)
        
        # Extract landmarks
        try:
            landmarks = results.pose_landmarks.landmark
            
            # Get coordinates
            shoulder = [landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].x,
                        landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value].y]
            hip = [landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].x,
                   landmarks[mp_pose.PoseLandmark.LEFT_HIP.value].y]
            knee = [landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value].x,
                    landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value].y]
            
            # Calculate angle
            angle = calculate_angle(shoulder, hip, knee)
            
            # Visualize angle
            cv2.putText(image, str(angle), 
                        tuple(np.multiply(hip, [640, 480]).astype(int)), 
                        cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 255, 255), 2, cv2.LINE_AA)
            
            # Check timer
            if angle < 158:
                if start_time is None:
                    start_time = time.time()  # Start the timer.
                else:
                    elapsed_time = time.time() - start_time
                    if elapsed_time >= 5:  # Check if 5 seconds have passed.
                        show_popup()
                        counter += 1
                        print(counter)
                        start_time = None  # Reset the timer.
            else:
                start_time = None  # Reset the timer when angle is above 158.
        
        except:
            pass

        # Render detections
        mp_drawing.draw_landmarks(image, results.pose_landmarks, mp_pose.POSE_CONNECTIONS,
                                  mp_drawing.DrawingSpec(color=(245, 117, 66), thickness=2, circle_radius=2), 
                                  mp_drawing.DrawingSpec(color=(245, 66, 230), thickness=2, circle_radius=2))
        
        # Display the image
        cv2.imshow('Mediapipe Feed', image)
        
        # Break the loop on 'q' key press
        if cv2.waitKey(10) & 0xFF == ord('q'):
            break
    
    # Release the capture and destroy all windows
    cap.release()
    cv2.destroyAllWindows()
